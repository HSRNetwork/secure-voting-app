# TODO: Create a new namespace
---
apiVersion: v1
kind: # TODO: Choose the correct volume type
metadata:
  name: db-volume
  # TODO: Add correct namespace
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: # TODO: Choose the correct volume claim type
metadata:
  name: db-claim
  # TODO: Add correct namespace
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: db
  name: db
  # TODO: Add correct namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      volumes:
      - name: db-storage
        persistentVolumeClaim:
          claimName: db-claim
      containers:
      - image: postgres:9.4
        name: postgres
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: db-storage
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: db
  name: db
  # TODO: Add correct namespace
spec:
  type: ClusterIP
  ports:
  - name: "db-service"
    port: 5432
    targetPort: 5432
  selector:
    app: db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis
  # TODO: Add correct namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      # TODO: Create a new volume (not-persistent, name: redis-data)
      containers:
      - image: redis:alpine
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - mountPath: /data
          name: redis-data
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
  # TODO: Add correct namespace
spec:
  type: ClusterIP
  ports:
  - name: "redis-service"
    port: 6379
    targetPort: 6379
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: result
  name: result
  # TODO: Add correct namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
      - image: hsrnetwork/vote-result:latest
        name: result
        ports:
        - containerPort: 80
          name: result
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: result
  name: result
  # TODO: Add correct namespace
spec:
  # TODO: Create a new NodePort (port: 5000, targetPort: 80, nodePort: 31000)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vote
  name: vote
  # TODO: Add correct namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vote
  template:
    metadata:
      labels:
        app: vote
    spec:
      containers:
      - image: hsrnetwork/vote-vote:latest
        name: vote
        ports:
        - containerPort: 80
          name: vote
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vote
  name: vote
  # TODO: Add correct namespace
spec:
  # TODO: Create a new NodePort (port: 5000, targetPort: 80, nodePort: 31000)
---
# TODO: Create the worker deployment (image: hsrnetwork/vote-worker:latest, name: worker)
